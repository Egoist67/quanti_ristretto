name: "lstm_ctc_net"
layer {
  name: "data"
  type: "Input"
  top: "data"
  input_param { shape: { dim: 1 dim: 1 dim: 32 dim: 100 } }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 64
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}

layer {
    bottom: "conv1"
    top: "conv1"
    name: "bn_conv1"
    type: "BatchNorm"
}
layer {
    bottom: "conv1"
    top: "conv1"
    name: "scale_conv1"
    type: "Scale"
    scale_param {
  	bias_term: true
    }
}

layer {
  name: "relu1"
  type: "ReLU"
  bottom: "conv1"
  top: "conv1"
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 128
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}

layer {
    bottom: "conv2"
    top: "conv2"
    name: "bn_conv2"
    type: "BatchNorm"
}
layer {
    bottom: "conv2"
    top: "conv2"
    name: "scale_conv2"
    type: "Scale"
    scale_param {
  	bias_term: true
    }
}

layer {
  name: "relu2"
  type: "ReLU"
  bottom: "conv2"
  top: "conv2"
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv3"
  type: "Convolution"
  bottom: "pool2"
  top: "conv3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
    bottom: "conv3"
    top: "conv3"
    name: "bn_conv3"
    type: "BatchNorm"
}
layer {
    bottom: "conv3"
    top: "conv3"
    name: "scale_conv3"
    type: "Scale"
    scale_param {
  	bias_term: true
    }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "conv3"
  top: "conv3"
}
layer {
  name: "conv4"
  type: "Convolution"
  bottom: "conv3"
  top: "conv4"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
    bottom: "conv4"
    top: "conv4"
    name: "bn_conv4"
    type: "BatchNorm"
}
layer {
    bottom: "conv4"
    top: "conv4"
    name: "scale_conv4"
    type: "Scale"
    scale_param {
  	bias_term: true
    }
}

layer {
  name: "relu4"
  type: "ReLU"
  bottom: "conv4"
  top: "conv4"
}
layer {
  name: "pool4"
  type: "Pooling"
  bottom: "conv4"
  top: "pool4"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride_w: 1
    stride_h: 2
    pad_w:0
    pad_h:0
  }
}
layer {
  name: "conv5"
  type: "Convolution"
  bottom: "pool4"
  top: "conv5"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
    bottom: "conv5"
    top: "conv5"
    name: "bn_conv5"
    type: "BatchNorm"
}
layer {
    bottom: "conv5"
    top: "conv5"
    name: "scale_conv5"
    type: "Scale"
    scale_param {
  	bias_term: true
    }
}
layer {
  name: "relu5"
  type: "ReLU"
  bottom: "conv5"
  top: "conv5"
}
layer {
  name: "conv6"
  type: "Convolution"
  bottom: "conv5"
  top: "conv6"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}

layer {
    bottom: "conv6"
    top: "conv6"
    name: "bn_conv6"
    type: "BatchNorm"
}
layer {
    bottom: "conv6"
    top: "conv6"
    name: "scale_conv6"
    type: "Scale"
    scale_param {
  	bias_term: true
    }
}

layer {
  name: "relu6"
  type: "ReLU"
  bottom: "conv6"
  top: "conv6"
}
layer {
  name: "pool6"
  type: "Pooling"
  bottom: "conv6"
  top: "pool6"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride_w: 1
    stride_h: 2
    pad_w:0
    pad_h:0
  }
}

layer {
  name: "pool7"
  type: "Pooling"
  bottom: "conv6"
  top: "pool7"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}

layer {
  name: "conv7"
  type: "Convolution"
  bottom: "pool6"
  top: "conv7"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
    bottom: "conv7"
    top: "conv7"
    name: "bn_conv7"
    type: "BatchNorm"
}
layer {
    bottom: "conv7"
    top: "conv7"
    name: "scale_conv7"
    type: "Scale"
    scale_param {
  	bias_term: true
    }
}
layer {
  name: "relu7"
  type: "ReLU"
  bottom: "conv7"
  top: "conv7"
}

layer {
  name: "conv8"
  type: "Convolution"
  bottom: "conv7"
  top: "conv8"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 512
    pad: 0
    kernel_size: 2
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
    bottom: "conv8"
    top: "conv8"
    name: "bn_conv8"
    type: "BatchNorm"
}
layer {
    bottom: "conv8"
    top: "conv8"
    name: "scale_conv8"
    type: "Scale"
    scale_param {
  	bias_term: true
    }
}
layer {
  name: "relu8"
  type: "ReLU"
  bottom: "conv8"
  top: "conv8"
}

layer {
  name: "conv9"
  type: "Convolution"
  bottom: "pool7"
  top: "conv9"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 512
    pad: 0
    kernel_size: 2
    stride: 2
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
    bottom: "conv9"
    top: "conv9"
    name: "bn_conv9"
    type: "BatchNorm"
}
layer {
    bottom: "conv9"
    top: "conv9"
    name: "scale_conv9"
    type: "Scale"
    scale_param {
  	bias_term: true
    }
}
layer {
  name: "relu9"
  type: "ReLU"
  bottom: "conv9"
  top: "conv9"
}

layer {
    name: "permuted_data"
    type: "Permute"
    bottom: "conv8"
    top: "permuted_data"
    permute_param {
        order: 3
        order: 0
        order: 1
        order: 2
    }
}

layer {
    name: "permuted_data1"
    type: "Permute"
    bottom: "conv9"
    top: "permuted_data1"
    permute_param {
        order: 3
        order: 0
        order: 1
        order: 2
    }
}

layer {
  name: "fc1"
  type: "InnerProduct"
  bottom: "permuted_data1"
  top: "fc1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 76
    axis: 2
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}

layer {
  name: "fc2"
  type: "InnerProduct"
  bottom: "permuted_data1"
  top: "fc2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 76
    axis: 2
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}

layer {
  name: "fc3"
  type: "InnerProduct"
  bottom: "permuted_data"
  top: "fc3"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 76
    axis: 2
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}

layer {
  name: "data_all"
  type: "Concat"
  bottom: "fc1"
  bottom: "fc2"
  bottom: "fc3"
  top: "data_all"
  concat_param {
    axis: 0
  }
}

layer {
  name: "permute_fc"
  type: "Permute"
  bottom: "data_all"
  top: "premuted_fc"
  include {
    phase: TEST
  }
  permute_param {
    order: 1
    order: 0
    order: 2
  }
}
